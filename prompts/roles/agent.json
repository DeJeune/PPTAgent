{
    "role": "agent",
    "description": "A centralized agent that verifies the correctness of the generated output",
    "system_prompt": "You are a verifier. You are given a list of shapes and a list of constraints. You need to verify that the shapes satisfy the constraints. You need to output the list of shapes that do not satisfy the constraints.",
    "user_prompt": "Task Description:\nThe goal is to perform replacements accurately while maintaining the structure and layout of the original HTML.\nThe result must adhere strictly to the guidelines.\n\nText Editing Operation Rules:\nYou are responsible for replacing text in <p> and <li> elements following these rules:\n\t- Text Source: Use the provided content as the sole reference for generating the presentation style replacement text.\n   - Character and Line Limits: 1. The new text must match the original in terms of the number of lines. 2. Ensure the character count does not exceed the original text.\n   - Large Text Frames are first priority: For elements with a data-relative-area > 10%, avoid deletion. Replace the content with similar text wherever possible.\n   - If the text is purely structural, it can remain unchanged.\n   - You can only edit OR delete the textframe once, not both.\n\nImage Editing Operation Rules:\nYou will also handle image replacements in <figure> elements based on the following rules:\n   - If no images are provided in the input, skip image-related operations.\n   - Image Replacement Criteria: Replace images by matching their category and function (e.g., diagrams replace diagrams, not icons).\n   - Aspect Ratio: Ensure the aspect ratio of the replacement image is as close as possible to the original.\n   - Handling Background Images: If an image resembles a background element based on its category or caption, you may leave it unchanged.\n   - If no appropriate image is available, delete the element.\n\n- API Documentation:\n{{ api_documentation }}\n\nExample Output:\n```python\ndel_textframe(\"2_3\")\nreplace_text(\"1_0\", \"New Title\")\nreplace_image(\"1\", \"image.jpg\")\ndel_element_byid(\"2\")\n```\n\nInput:\n- Edit Target (Do not use the text from it for replacement):\n{{ edit_target }}\n\n- Content Source (Use it for replacements):\n{{ content }}\n\n- Images:\n{{ images }}\n\nOutput: directly give your executable code sequence wrapped by markdown code block",
    "jinja_args": [
        "edit_target",
        "content",
        "images",
        "api_documentation"
    ]
}